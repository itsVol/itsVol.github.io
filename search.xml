<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JSON基础知识概览</title>
    <url>/2021/06/09/JSON%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%A6%82%E8%A7%88/</url>
    <content><![CDATA[<p>Q: What is JSON<br>
A: JavaScript Object Notation,is a lightweight data-interchange format</p>
<blockquote>
<p>JSON is a text format that is completely language independent but uses conventions that are familiar to programmers of the C-family of languages, including C, C++, C#, Java, JavaScript, Perl, Python, and many others.</p>
</blockquote>
<p>An object is an unordered set of name/value pairs. An object begins with {left brace and ends with }right brace. Each name is followed by :colon and the name/value pairs are separated by ,comma.</p>
<blockquote>
<p>{“name”:“sojson”}</p>
</blockquote>
<p>A value can be a string in double quotes, or a number, or true or false or null, or an object or an array. These structures can be nested.</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">UP_UID = BiliJson[&#x27;data&#x27;][&#x27;card&#x27;][&#x27;desc&#x27;][&#x27;user_profile&#x27;][&#x27;info&#x27;][&#x27;uid&#x27;]</span><br></pre></td></tr></table></figure>
<p>The meaning of this code is BiliJson.data.card.desc.user_profile.info.uid<br>
for example:</p>
<span id="more"></span>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;code&quot;</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;message&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;card&quot;</span>: &#123;</span><br><span class="line">			<span class="attr">&quot;desc&quot;</span>: &#123;</span><br><span class="line">				<span class="attr">&quot;uid&quot;</span>: <span class="number">0000974</span>,</span><br><span class="line">				<span class="attr">&quot;type&quot;</span>: <span class="number">2</span>,</span><br><span class="line">				<span class="attr">&quot;rid&quot;</span>: <span class="number">138447857</span>,</span><br><span class="line">				<span class="attr">&quot;acl&quot;</span>: <span class="number">0</span>,</span><br><span class="line">				<span class="attr">&quot;view&quot;</span>: <span class="number">252346</span>,</span><br><span class="line">				<span class="attr">&quot;repost&quot;</span>: <span class="number">0</span>,</span><br><span class="line">				<span class="attr">&quot;comment&quot;</span>: <span class="number">40</span>,</span><br><span class="line">				<span class="attr">&quot;like&quot;</span>: <span class="number">1281</span>,</span><br><span class="line">				<span class="attr">&quot;is_liked&quot;</span>: <span class="number">0</span>,</span><br><span class="line">				<span class="attr">&quot;dynamic_id&quot;</span>: <span class="number">2345678900000</span>,</span><br><span class="line">				<span class="attr">&quot;timestamp&quot;</span>: <span class="number">1623232804</span>,</span><br><span class="line">				<span class="attr">&quot;pre_dy_id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">				<span class="attr">&quot;orig_dy_id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">				<span class="attr">&quot;orig_type&quot;</span>: <span class="number">0</span>,</span><br><span class="line">				<span class="attr">&quot;user_profile&quot;</span>: &#123;</span><br><span class="line">					<span class="attr">&quot;info&quot;</span>: &#123;</span><br><span class="line">						<span class="attr">&quot;uid&quot;</span>: <span class="number">111174</span>,</span><br><span class="line">						<span class="attr">&quot;uname&quot;</span>: <span class="string">&quot;evt&quot;</span>,</span><br><span class="line">						</span><br><span class="line">					&#125;,</span><br><span class="line">					<span class="attr">&quot;card&quot;</span>: &#123;</span><br><span class="line">						<span class="attr">&quot;official_verify&quot;</span>: &#123;</span><br><span class="line">							<span class="attr">&quot;type&quot;</span>: <span class="number">0</span>,</span><br><span class="line">							<span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;2020&quot;</span></span><br><span class="line">						&#125;</span><br><span class="line">					&#125;,</span><br><span class="line">					<span class="attr">&quot;vip&quot;</span>: &#123;</span><br><span class="line">						<span class="attr">&quot;vipType&quot;</span>: <span class="number">2</span>,</span><br><span class="line">						<span class="attr">&quot;vipDueDate&quot;</span>: <span class="number">1702396800000</span>,</span><br><span class="line">						<span class="attr">&quot;vipStatus&quot;</span>: <span class="number">1</span>,</span><br><span class="line">						<span class="attr">&quot;themeType&quot;</span>: <span class="number">0</span>,</span><br><span class="line">						<span class="attr">&quot;label&quot;</span>: &#123;</span><br><span class="line">							<span class="attr">&quot;path&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">							<span class="attr">&quot;text&quot;</span>: <span class="string">&quot;会员&quot;</span>,</span><br><span class="line">							<span class="attr">&quot;label_theme&quot;</span>: <span class="string">&quot;annual_vip&quot;</span>,</span><br><span class="line">							<span class="attr">&quot;text_color&quot;</span>: <span class="string">&quot;#FFFFFF&quot;</span>,</span><br><span class="line">							<span class="attr">&quot;bg_style&quot;</span>: <span class="number">1</span>,</span><br><span class="line">							<span class="attr">&quot;bg_color&quot;</span>: <span class="string">&quot;#FB7299&quot;</span>,</span><br><span class="line">							<span class="attr">&quot;border_color&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">						&#125;,</span><br><span class="line">						<span class="attr">&quot;avatar_subscript&quot;</span>: <span class="number">1</span>,</span><br><span class="line">						<span class="attr">&quot;nickname_color&quot;</span>: <span class="string">&quot;#FB7299&quot;</span>,</span><br><span class="line">						<span class="attr">&quot;role&quot;</span>: <span class="number">3</span>,</span><br><span class="line">						</span><br><span class="line">					&#125;,</span><br><span class="line">				</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>READING LIST:</strong><br>
<a href="https://www.json.org/json-en.html">https://www.json.org/json-en.html</a><br>
<a href="https://www.sojson.com/json/json_what.html">https://www.sojson.com/json/json_what.html</a><br>
<a href="https://www.bejson.com/">https://www.bejson.com/</a></p>
]]></content>
      <categories>
        <category>JSON</category>
      </categories>
      <tags>
        <tag>JSON</tag>
      </tags>
  </entry>
  <entry>
    <title>RSA算法是什么</title>
    <url>/2021/06/11/RSA%E7%AE%97%E6%B3%95%E6%98%AF%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<p><strong>reference</strong><br>
http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html<br>
https://www.ruanyifeng.com/blog/2013/07/rsa_algorithm_part_two.html</p>
<blockquote>
<p>1977年，三位数学家Rivest、Shamir 和 Adleman 设计了一种算法，可以实现非对称加密。<br>
这种算法用他们三个人的名字命名，叫做RSA算法。从那时直到现在，RSA算法一直是最广为使用的&quot;非对称加密算法&quot;。<br>
毫不夸张地说，只要有计算机网络的地方，就有RSA算法。</p>
</blockquote>
<p>这种算法高效可靠，很难破解，今天我们来学习一下其中的数学原理。</p>
<h4 id="互质关系-coprime">互质关系(coprime)</h4>
<pre><code>除了1再无其他公因子，则称这两个数为互质关系 例如：3和10
不难得出以下结论：
</code></pre>
  <span id="more"></span>
<blockquote>
<ol>
<li>
<p>任意两个质数构成互质关系，比如13和61。</p>
</li>
<li>
<p>一个数是质数，另一个数只要不是前者的倍数，两者就构成互质关系，&gt;比如3和10。</p>
</li>
<li>
<p>如果两个数之中，较大的那个数是质数，则两者构成互质关系，比如97&gt;和57。</p>
</li>
<li>
<p>1和任意一个自然数是都是互质关系，比如1和99。</p>
</li>
<li>
<p>p是大于1的整数，则p和p-1构成互质关系，比如57和56。</p>
</li>
<li>
<p>p是大于1的奇数，则p和p-2构成互质关系，比如17和15。</p>
</li>
</ol>
</blockquote>
<h4 id="欧拉函数-br">欧拉函数 <br></h4>
<p>计算在给定正整数n内，有多少对互质关系，欧拉函数便是解决这一问题，用φ(n)表示</p>
]]></content>
      <tags>
        <tag>RSA</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-543</title>
    <url>/2021/06/03/leetcode-543/</url>
    <content><![CDATA[<h3 id="Diameter-of-Binary-Tree">Diameter of Binary Tree</h3>
<p>Given the root of a binary tree, return the length of the diameter of the tree.</p>
<p>The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.</p>
<p>The length of a path between two nodes is represented by the number of edges between them.</p>
<p>SOLUTION KEY: dad dad,you can get X form my path</p>
<h2 id="code￼0"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">diameterOfBinaryTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span> )<span class="keyword">return</span> <span class="number">0</span>;   <span class="comment">//出口条件</span></span><br><span class="line">        height(root);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">height</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="comment">//if root==null height==0</span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)<span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//叶子结点的下一层用-1表示</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> L=height(root.left);</span><br><span class="line">        <span class="keyword">int</span> R=height(root.right);</span><br><span class="line">        ans=Math.max(ans,L+R);<span class="comment">//存储最大的数作为ans</span></span><br><span class="line">        <span class="comment">//height of the tree is max of LST &amp; RST +1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>+Math.max(L,R);<span class="comment">//增加一个链接</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></h2>
<span id="more"></span>
<p>Input: root = [1,2,3,4,5]<br>
Output: 3<br>
Explanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].</p>
<p><img src="/images/543.png" alt=""></p>
<hr>
<p>4左右孩子都是null，所以返回的 ans为0，返回给上一层2的信息：爸爸爸爸，你走我这条路你只能得到1条最大路径。</p>
<p>2的右孩子5提供了1条最大路径，所以2给他的爸爸反馈：爸爸呀，从我这儿走只能给你提供最大为2的路径（1+Math.max(L,R)）</p>
<hr>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>有趣的整数越界判断方法</title>
    <url>/2021/06/12/%E6%9C%89%E8%B6%A3%E7%9A%84%E6%95%B4%E6%95%B0%E8%B6%8A%E7%95%8C%E5%88%A4%E6%96%AD%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>今天在fastjson的GitHub上看到一个可以复现的bug，依然是反序列化越界问题，issue2041.<br>
在找问题原因的时候，学会了一些知识点,挺有趣的。</p>
<p>bug是：在反序列化一个很长的字符串时候（例如“123123333333333333”），很明显会整数越界，返回的报错为：com.alibaba.fastjson.JSONException: parseInt error, field : i</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可复现的代码</span></span><br><span class="line"><span class="keyword">package</span> com.issue2041;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestIssue2041</span> </span>&#123;</span><br><span class="line">    Integer i;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getI</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setI</span><span class="params">(Integer i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.i = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String sInt[] = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;&#123;\&quot;i\&quot;:11234564654321321&#125;&quot;</span></span><br><span class="line">                , <span class="string">&quot;&#123;\&quot;i\&quot;:1001234564654321321000000000000000000000&#125;&quot;</span></span><br><span class="line">                , <span class="string">&quot;&#123;\&quot;i\&quot;:100000000000000000000012345646543213210&#125;&quot;</span></span><br><span class="line">                , <span class="string">&quot;&#123;\&quot;i\&quot;:10000000000000000000001234564654321321&#125;&quot;</span></span><br><span class="line">                , <span class="string">&quot;&#123;\&quot;i\&quot;:112345646543213210&#125;&quot;</span>&#125;;</span><br><span class="line">        System.out.println(sInt[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (String s : sInt) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(JSONObject.toJSONString(JSONObject.parseObject(s, TestIssue2041.class)));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>查看调用栈，找到了NumberFormatException报错的原因。就是字符串太长，转换成整数形直接越界了</p>
</blockquote>
<span id="more"></span>  
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">com.alibaba.fastjson.JSONException: parseInt error, field : i</span><br><span class="line">	at com.alibaba.fastjson.serializer.IntegerCodec.deserialze(IntegerCodec.java:<span class="number">101</span>)</span><br><span class="line">	at com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer.parseField(DefaultFieldDeserializer.java:<span class="number">88</span>)</span><br><span class="line">	at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.parseField(JavaBeanDeserializer.java:<span class="number">1282</span>)</span><br><span class="line">	at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze(JavaBeanDeserializer.java:<span class="number">897</span>)</span><br><span class="line">	at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze(JavaBeanDeserializer.java:<span class="number">295</span>)</span><br><span class="line">	at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject(DefaultJSONParser.java:<span class="number">706</span>)</span><br><span class="line">	at com.alibaba.fastjson.JSON.parseObject(JSON.java:<span class="number">394</span>)</span><br><span class="line">	at com.alibaba.fastjson.JSON.parseObject(JSON.java:<span class="number">298</span>)</span><br><span class="line">	at com.alibaba.fastjson.JSON.parseObject(JSON.java:<span class="number">588</span>)</span><br><span class="line">	at com.issue2041.TestIssue2041.main(TestIssue2041.java:<span class="number">28</span>)</span><br><span class="line">Caused by: java.lang.NumberFormatException: <span class="number">112345646543213210</span></span><br><span class="line">	at com.alibaba.fastjson.parser.JSONLexerBase.intValue(JSONLexerBase.java:<span class="number">1076</span>)</span><br><span class="line">	at com.alibaba.fastjson.serializer.IntegerCodec.deserialze(IntegerCodec.java:<span class="number">79</span>)</span><br><span class="line">	... <span class="number">9</span> more</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里的转换方法值得我们阅读学习。</p>
</blockquote>
<p>首先。代码注释引发了我的兴趣：// Accumulating negatively avoids surprises near MAX_VALUE</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">while</span> (i &lt; max) &#123;</span><br><span class="line">            <span class="comment">// Accumulating negatively avoids surprises near MAX_VALUE</span></span><br><span class="line">            <span class="keyword">char</span> chLocal = charAt(i++);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (chLocal == <span class="string">&#x27;L&#x27;</span> || chLocal == <span class="string">&#x27;S&#x27;</span> || chLocal == <span class="string">&#x27;B&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            digit = chLocal - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (result &lt; multmin) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NumberFormatException(numberString());</span><br><span class="line">            &#125;</span><br><span class="line">            result *= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (result &lt; limit + digit) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NumberFormatException(numberString());</span><br><span class="line">            &#125;</span><br><span class="line">            result -= digit;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (negative) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; np + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">/* Only got &quot;-&quot; */</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NumberFormatException(numberString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>while循环中的代码是核心处理逻辑，也就是把字符串转换成数字。</p>
<p>我们先想一下，考虑一个三位数123，比较通常的算法是：<br>
如果是十进制，123=1<em>10的2次方+2</em>10的1次方+3<em>10的0次方。<br>
如果是八进制，123=1</em>8的2次方+2<em>8的1次方+3</em>8的0次方。<br>
但仔细看while循环中的这两行代码，result <em>= radix;和result -= digit;，我们发现他并不是使用上面的算法，而是使用了变种的算法：<br>
如果是十进制，123=((1</em>10 + 2) * 10 + 3)。<br>
如果是八进制，123=((1*8 + 2) * 8 + 3)。<br>
意思其实是一样的，但是这种算法对于程序设计来说更加友好。</p>
<p>至于为什么是result -= digit;而不是result += digit;，是因为这里的计算全部基于负数，所以算法里的加在这里就是减。</p>
<p>我们还注意到，代码里定义了一个int multmin;，以及下面还有这行代码：multmin = limit / radix;<br>
以及循环里的if (result &lt; multmin)， if (result &lt; limit + digit)，这又是干什么呢？<br>
这是该方法的另一个精妙之处，它用来判断是否溢出。每一次的循环都会判断下一次循环的计算是否会溢出。<br>
为了便于理解，我们以十进制为例，并且假设十进制的最大值为998，<br>
那么定义的limit就是-998，根据multmin = limit / radix;这行代码，multmin就是-99。<br>
进入循环以后，假如result已经到了-100，if (result &lt; multmin)会check出来，因为在下一次循环的时候，result=-100<em>10=-1000，溢出。<br>
假如result为-99，if (result &lt; multmin)可以通过，但是如果digit=9，那么if (result &lt; limit + digit)会check出来，因为在下一次循环的时候，  result=-99</em>10-9=-999，溢出。</p>
<p>为什么用负数进行计算呢？我先查了一下stackOverFlow。回答称：<br>
<img src="/images/stof-neg.png" alt=""></p>
<p>其实就是由于整形数据范围不对称，负数取值范围更宽。</p>
<blockquote>
<p>Integer类取值和 int 类型取值一致，取值范围是从-2147483648 至 2147483647 ，包括-2147483648 和 2147483647。</p>
<p>但是对于Integer类，java为了提高效率，初始化了-128~127之间的整数对象，因此Integer类取值-128–127的时候效率最高。</p>
</blockquote>
<blockquote>
<p>JVM会自动维护八种基本类型的常量池，int常量池中初始化-128~127的范围，所以当为Integer i=127时，在自动装箱过程中是取自常量池中的数值，而当Integer i=128时，128不在常量池范围内，所以在自动装箱过程中需new 128，所以地址不一样。</p>
</blockquote>
]]></content>
      <categories>
        <category>solution</category>
      </categories>
      <tags>
        <tag>source</tag>
      </tags>
  </entry>
  <entry>
    <title>用哈希做抽奖算法</title>
    <url>/2021/06/08/%E7%94%A8%E5%93%88%E5%B8%8C%E5%81%9A%E6%8A%BD%E5%A5%96%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>今天阅读了稚晖君的抽奖代码，觉得很受启发，写这篇博客来理顺一下思路<br>
原仓库地址：https://github.com/peng-zhihui/BilibiliLottery</p>
<blockquote>
<p>一个优秀的抽奖算法：公开，公平，不可操控，不可逆，概率上均匀分布。</p>
</blockquote>
<p>将用户id进行hash处理，开奖时随机用一段不可预测的文字hash后进行比较。</p>
<p>utils.py</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>GetDynamicid()</td>
<td>获取本人动态Id</td>
</tr>
<tr>
<td>GetMiddleStr()</td>
<td>对json内容切片</td>
</tr>
<tr>
<td>GetTotalRepost()</td>
<td>获得总评论数</td>
</tr>
<tr>
<td>GetUsers()</td>
<td>获得用户信息</td>
</tr>
</tbody>
</table>
<span id="more"></span>
<p>GetDynamicid():使用正则表达式，提取URL中的数字作为id num[0]表示只返回第一串字符串。</p>
<p>GetMiddleStr() ：对json数据进行处理，截取需要的部分</p>
<p>GetTotalRepost()与GetUser()：使用API，主要就是在json中切出有用信息。</p>
<p>最后，将数据排序后返回</p>
<p><strong>做类似项目有几点需要注意</strong></p>
<ol>
<li>知道该网站API怎么使用</li>
<li>明白json数据怎么处理</li>
<li>明确的整体设计思路</li>
</ol>
<p><strong>原仓库给初学者提供了学习的思路，举一反三会收获很多</strong></p>
]]></content>
      <categories>
        <category>solution</category>
      </categories>
      <tags>
        <tag>source</tag>
      </tags>
  </entry>
</search>
